<div class="container py-4">
    {{#if isInstructor}}
        <div class="container-fluid">
            <div class="row content">
                <!-- Left Column -->
                <div class="col-sm-3 sidenav" style="height: 900px;">
                    <h2>Instructor Dashboard</h2>
                    <p>Username: {{ user.username }}</p>
                    <p>Email: {{ user.email }}</p>
                    <p>Name: {{ user.firstName }} {{ user.lastName }}</p>
                    <p>Role: {{ user.role }}</p>
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a class="nav-link" href="/courses">Courses</a>
                        </li>    
                        <li class="nav-item">
                            <a href="/add-course" class="nav-link">Add Course</a>
                        </li>
                        <li class="nav-item">
                            <a href="/logout" class="nav-link">Logout</a>
                        </li>
                    </ul>
                </div>

                <!-- Right Column -->
                <div class="col-sm-9" style="background-color: white;">
                    <h2>All Courses</h2>
                    {{#each courses}}
    <div class="course">
        <h3>{{this.name}}</h3>
        <p>{{this.description}}</p>
        <button class="btn btn-warning update-course" data-doc="{{this._id}}">Update Course</button>
        <button class="btn btn-danger delete-course" data-doc="{{this._id}}">Delete Course</button>
    </div>
{{/each}}

                </div>
            </div>
        </div>
    {{else}}
        <div class="container-fluid">
            <div class="row content">
                <!-- Left Column -->
                <div class="col-sm-3 sidenav" style="height: 900px;">
                    <h2>User Dashboard</h2>
                    <p>Username: {{ user.username }}</p>
                    <p>Email: {{ user.email }}</p>
                    <p>Name: {{ user.firstName }} {{ user.lastName }}</p>
                    <p>Role: {{ user.role }}</p>
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a class="nav-link" href="/courses">Courses</a>
                        </li> 
                        <li class="nav-item">
                            <a class="nav-link" href="/cart">Cart</a>
                        </li>
                        <li class="nav-item">
                            <a href="/logout" class="nav-link">Logout</a>
                        </li>
                    </ul>
                </div>

                <!-- Right Column -->
                <div class="col-sm-9" style="background-color: white;">
                    <h2>Enrolled Courses:</h2>
                    {{#each user.courses}}
                        <div class="my-2 p-2 border bg-light rounded shadow">
                            <h3>{{name}}</h3>
                            <p>{{description}}</p>
                            <button class="btn btn-danger drop-course" data-doc="{{_id}}">Drop Course</button>
                        </div>
                    {{/each}}
                </div>
            </div>
        </div>
    {{/if}}
</div>

<script>
document.querySelectorAll('.update-course').forEach(btn => {
    btn.addEventListener('click', (e) => {
        e.preventDefault();
        const courseId = btn.dataset.doc;
        window.location.href = `/update-course/${courseId}`; // Redirect to the update page
    });
});

const courseAction = async (courseId, action, updateData = {}) => {
    console.log('Course id: ', courseId, ' action: ', action)
    let success = false,
        url = `/courses/${courseId}`,
        options = {};
    if (action === 'delete') {
        options.method = 'DELETE';
    } else if(action === 'drop') {
        options.method = 'POST';
        options.body = JSON.stringify({ courseId });
        options.headers = { 'Content-Type': 'application/json' };
        url = '/user-courses';
    } else if(action === 'update') {
        options.method = 'PUT';
        options.body = JSON.stringify(updateData);
        options.headers = { 'Content-Type': 'application/json' };
    }
    console.log('Options: ', JSON.stringify(options));
    console.log('url: ', url);
    try {
        const response = await fetch(url, options);
        console.log('Data: ', response);
        success = response.status == 200;
    } catch (err) {
        console.error(err);
    }
    return success;
};


document.querySelectorAll('.delete-course').forEach(btn => {
    btn.addEventListener('click', async (e) => {
        e.preventDefault();
        // confirmation 
        if (confirm('Are you sure you want to delete this course?')) {
            console.log('Deleting course: ', btn.dataset.doc);
            const courseId = btn.dataset.doc;
            const success = await courseAction(courseId, 'delete');
            if(success) {
                alert('Course deleted successfully.'); // confirmation message
                window.location.reload(); // redirect
            } else {
                alert('Failed to delete the course. Please try again.'); 
            }
        }
    });
});

document.querySelectorAll('.drop-course').forEach(btn => {
    btn.addEventListener('click', async (e) => {
        console.log('Dropping course: ', btn.dataset.doc)
        e.preventDefault()
        const success = await courseAction(btn.dataset.doc, 'drop')
        if(success) {
            btn.parentElement.remove()
        }
    })
})
</script>
